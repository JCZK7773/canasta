# NOTES
    #     pygame.Rect
    # pygame object for storing rectangular coordinates
    # Rect(left, top, width, height) -> Rect

    #     pygame.draw.rect()
    # draw a rectangle
    # rect(surface, color, rect) -> Rect
    # rect(surface, color, rect, width=0, border_radius=0, border_top_left_radius=-1, border_top_right_radius=-1, border_bottom_left_radius=-1, border_bottom_right_radius=-1) -> Rect
    # Draws a rectangle on the given surface.
    #
    # Parameters
    # surface (Surface) -- surface to draw on
    #
    # color (Color or int or tuple(int, int, int, [int])) -- color to draw with, the alpha value is optional if using a tuple (RGB[A])
    #
    # rect (Rect) -- rectangle to draw, position and dimensions
    #
    # width (int) --
    #
    # (optional) used for line thickness or to indicate that the rectangle is to be filled (not to be confused with the width value of the rect parameter)

    #     render()¶
    # draw text on a new Surface
    # render(text, antialias, color, background=None) -> Surface
    # This creates a new Surface with the specified text rendered on it. pygame provides no way to directly draw text on an existing Surface: instead you must use Font.render() to create an image (Surface) of the text, then blit this image onto another Surface.

    # If you reassign self.image.get_rect() then you have to reassign .center() as well. You do not need to reassign .get_rect() every time you edit the object!!!!!

    # Using this suggested line: for event in [pygame.event.wait()]+pygame.event.get(): greatly reduces CPU usage in games where the CPU runs full-bore when there are no events (compared to for event in pygame.event.get():). Nice. –

    # Debugging Info for Card Movement Speed Testing
        # First Half of List Iteration
            # Highest Performance Card Info
                # Lowest Time = 0.01
                # Iter_num = 1,000
                # Ratio = .001
                # Iter_num/Final_time = 100,000
            # Lowest Performance Card Info
                # Highest Time = 1.1
                # Iter_num = 288
                # Ratio = .976
                # Iter_num/Final_time = 261
        # Second Half of List Iteration
            # Highest Performance Card Info
                # Lowest Time = 0.01
                # Iter_num = 501
                # Ratio = .002
                # Iter_num/Final_time = 50,100
            # Lowest Performance Card Info
                # Highest Time = 1.71
                # Iter_num = 712
                # Ratio = .608
                # Iter_num/Final_time = 424
        # Conclusions
            # Higher the Ratio = Higher the Total Time
            # Higher the draw_window_calls_num = Higher the Total Time. More calls; more time.
            # Actual problem was in game.py. Was updating every single card again after only updating them via LayeredDirty .update() method.

    # The best alternative is DeviantArt, which is free. Other great sites and apps similar to OpenGameArt.org are Freesound (Free, Open Source), Poly Haven (Free), SkinBase (Free) and RateMyDrawings (Free).
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
